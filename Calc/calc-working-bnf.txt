To eliminate left recursion
Convert: A -> Aa1 | Aa2 | ... | Aan | B
To: 
  A -> BA'
  A' -> a1 A' | a2 A' | ... | ""

Context-Free Portion
====================
< Program >    ::= < Program > < Statement >
                   | < Statement >

< Statement >  ::= < Expression > NEWLINE

< Expression > ::= < Term > < Expression' >

< Expression' > ::= PLUS < Term > < Expression' >
                   | MINUS < Term > < Expression' >
                   | ""

< Term >       ::= < Factor > < Term' >

< Term' >      ::= TIMES < Factor > < Term' >
                   | DIVIDE < Factor > < Term' >
                   | MOD < Factor > < Term' >
                   | ""

< Factor >     ::= < Exponent > < Factor' >

< Factor' >    ::= POW < Exponent > < Factor' >
                   | ""

< Exponent >   ::= < Number >
                   | MINUS < Exponent >
                   | LPAREN < Expression > RPAREN

< Number >     ::= INTLIT | REALLIT

Lexer Grammar
=============
PLUS            +
MINUS           -
TIMES           *
DIVIDE          /
POW             ^
LPAREN          (
RPAREN          )
NEWLINE         \n
INTLIT          [0-9]+
REALLIT         [0-9]+\.[0-9]+
MOD             MOD